import collections
from collections import defaultdict

# Initialisation du graphe
graph = defaultdict(list)

# Remplissage du graphe avec la liste des rencontres
rencontres = [
    ('1', 'A2', 'C3'),
    ('1', 'A3', 'C8'),
    ('1', 'A5', 'A6'),
    ('1', 'A7', 'B3'),
    ('1', 'A9', 'A1'),
    ('1', 'B2', 'A4'),
    ('1', 'B4', 'D3'),
    ('1', 'B7', 'C6'),
    ('1', 'B9', 'B1'),
    ('1', 'C2', 'B8'),
    ('1', 'C4', 'B6'),
    ('1', 'C5', 'D8'),
    ('1', 'C7', 'D5'),
    ('1', 'C9', 'C1'),
    ('1', 'D2', 'A8'),
    ('1', 'D4', 'B5'),
    ('1', 'D6', 'D7'),
    ('1', 'D9', 'D1'),
    ('2', 'A1', 'D9'),
    ('2', 'A4', 'C9'),
    ('2', 'A6', 'C5'),
    ('2', 'A8', 'A9'),
    ('2', 'B1', 'B2'),
    ('2', 'B3', 'A2'),
    ('2', 'B5', 'A3'),
    ('2', 'B6', 'B7'),
    ('2', 'B8', 'D6'),
    ('2', 'C1', 'D2'),
    ('2', 'C3', 'C4'),
    ('2', 'C6', 'C7'),
    ('2', 'C8', 'B4'),
    ('2', 'D1', 'C2'),
    ('2', 'D3', 'D4'),
    ('2', 'D5', 'A5'),
    ('2', 'D7', 'A7'),
    ('2', 'D8', 'B9'),
    ('3', 'A2', 'B5'),
    ('3', 'A3', 'A4'),
    ('3', 'A5', 'C1'),
    ('3', 'A7', 'D8'),
    ('3', 'A9', 'D1'),
    ('3', 'B2', 'C3'),
    ('3', 'B4', 'A1'),
    ('3', 'B7', 'B8'),
    ('3', 'B9', 'D7'),
    ('3', 'C2', 'D3'),
    ('3', 'C4', 'A8'),
    ('3', 'C5', 'C6'),
    ('3', 'C7', 'A6'),
    ('3', 'C9', 'B3'),
    ('3', 'D2', 'C8'),
    ('3', 'D4', 'D5'),
    ('3', 'D6', 'B6'),
    ('3', 'D9', 'B1'),
    ('4', 'A1', 'C2'),
    ('4', 'A4', 'D2'),
    ('4', 'A6', 'A7'),
    ('4', 'A8', 'B4'),
    ('4', 'B1', 'C7'),
    ('4', 'B3', 'D4'),
    ('4', 'B5', 'C5'),
    ('4', 'B6', 'A5'),
    ('4', 'B8', 'B9'),
    ('4', 'C1', 'B7'),
    ('4', 'C3', 'D6'),
    ('4', 'C6', 'A9'),
    ('4', 'C8', 'C9'),
    ('4', 'D1', 'A2'),
    ('4', 'D3', 'A3'),
    ('4', 'D5', 'B2'),
    ('4', 'D7', 'C4'),
    ('4', 'D8', 'D9'),
    ('5', 'A2', 'A3'),
    ('5', 'A5', 'B8'),
    ('5', 'A7', 'C6'),
    ('5', 'A9', 'C4'),
    ('5', 'B2', 'D8'),
    ('5', 'B4', 'B5'),
    ('5', 'B6', 'D5'),
    ('5', 'B7', 'A8'),
    ('5', 'B9', 'C1'),
    ('5', 'C2', 'A4'),
    ('5', 'C5', 'B1'),
    ('5', 'C7', 'C8'),
    ('5', 'C9', 'D1'),
    ('5', 'D2', 'D3'),
    ('5', 'D4', 'A6'),
    ('5', 'D6', 'A1'),
    ('5', 'D7', 'B3'),
    ('5', 'D9', 'C3'),
    ('6', 'A1', 'B6'),
    ('6', 'A3', 'B2'),
    ('6', 'A4', 'A5'),
    ('6', 'A6', 'D6'),
    ('6', 'A8', 'C7'),
    ('6', 'B1', 'A7'),
    ('6', 'B3', 'B4'),
    ('6', 'B5', 'D9'),
    ('6', 'B8', 'C9'),
    ('6', 'C1', 'C2'),
    ('6', 'C3', 'B9'),
    ('6', 'C4', 'D4'),
    ('6', 'C6', 'D7'),
    ('6', 'C8', 'A2'),
    ('6', 'D1', 'D2'),
    ('6', 'D3', 'B7'),
    ('6', 'D5', 'C5'),
    ('6', 'D8', 'A9'),
    ('7', 'A2', 'D5'),
    ('7', 'A5', 'D3'),
    ('7', 'A7', 'A8'),
    ('7', 'A9', 'B1'),
    ('7', 'B2', 'B3'),
    ('7', 'B4', 'C4'),
    ('7', 'B6', 'C8'),
    ('7', 'B7', 'D1'),
    ('7', 'B9', 'A6'),
    ('7', 'C2', 'C3'),
    ('7', 'C5', 'A3'),
    ('7', 'C7', 'B5'),
    ('7', 'C9', 'A1'),
    ('7', 'D2', 'B8'),
    ('7', 'D4', 'C6'),
    ('7', 'D6', 'C1'),
    ('7', 'D7', 'D8'),
    ('7', 'D9', 'A4'),
    ('8', 'A1', 'A2'),
    ('8', 'A3', 'D7'),
    ('8', 'A4', 'B9'),
    ('8', 'A6', 'B7'),
    ('8', 'A8', 'D4'),
    ('8', 'B1', 'D2'),
    ('8', 'B3', 'C2'),
    ('8', 'B5', 'B6'),
    ('8', 'B8', 'A9'),
    ('8', 'C1', 'A7'),
    ('8', 'C3', 'A5'),
    ('8', 'C4', 'C5'),
    ('8', 'C6', 'B2'),
    ('8', 'C8', 'D9'),
    ('8', 'D1', 'B4'),
    ('8', 'D3', 'C9'),
    ('8', 'D5', 'D6'),
    ('8', 'D8', 'C7')
]

for _, team1, team2 in rencontres:
    graph[team1].append(team2)
    graph[team2].append(team1)  # Assurez-vous que le graphe est non dirigé

def dfs(node, graph, visited, start_node, path_length):
    if node in visited:
        if node == start_node and path_length >= 3:  # Un cycle doit être d'au moins 3 nœuds
            return path_length
        return float('inf')  # Pas un cycle valide ou trop court

    visited.add(node)  # Marquer le nœud comme visité
    shortest_cycle = float('inf')
    for neighbor in graph[node]:
        if neighbor not in visited or (neighbor == start_node and path_length >= 2):
            cycle_length = dfs(neighbor, graph, set(visited), start_node, path_length + 1)
            shortest_cycle = min(shortest_cycle, cycle_length)

    return shortest_cycle

def find_shortest_cycle(graph):
    shortest_cycle_length = float('inf')
    for node in graph:
        cycle_length = dfs(node, graph, set(), node, 0)
        shortest_cycle_length = min(shortest_cycle_length, cycle_length)
    
    return shortest_cycle_length if shortest_cycle_length != float('inf') else -1

# Rechercher le plus petit cycle
shortest_cycle_length = find_shortest_cycle(graph)
print(f"La longueur du plus petit cycle est: {shortest_cycle_length}")

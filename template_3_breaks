using JuMP, Gurobi, Cbc
using Random

# Initialisation du générateur de nombres aléatoires
rng = MersenneTwister()
# Nombre d'équipes et de journées
N = 36
T = 8

possible = true
it = 0
max_iterations = 100  # Limite arbitraire pour éviter une boucle infinie

while possible && it < max_iterations
    println("Iteration: $it")
    
    # Réinitialise le modèle (ou ajuste l'objectif si réutilisation)
    model = Model(Gurobi.Optimizer)
    
    # Définition des variables
    @variable(model, x[1:N, 1:N, 1:T], Bin)

    # Contrainte : une équipe ne peut pas jouer contre elle-même
    @constraint(model, no_self_play[i in 1:N, t in 1:T], x[i, i, t] == 0)

    # Contrainte : une équipe joue au plus 1 fois contre chaque autre équipe
    @constraint(model, max_one_game[i in 1:N, j in 1:N; i != j], sum(x[i, j, t] + x[j, i, t] for t in 1:T) <= 1)

    # Contrainte : chaque équipe joue exactement un match par journée
    @constraint(model, one_game_per_day[t in 1:T, i in 1:N], sum(x[i, j, t] + x[j, i, t] for j in 1:N) == 1)

    # Contraintes spécifiques pour chaque pot
    for i in 1:N
        for pot_start in 1:9:28
            @constraint(model, sum(x[i, j, t] for t in 1:T, j in pot_start:pot_start+8) == 1)
            @constraint(model, sum(x[j, i, t] for t in 1:T, j in pot_start:pot_start+8) == 1)
        end
    end
    # Ajoute un objectif aléatoire
    @objective(model, Max, sum(rand(rng) * x[i, j, t] for i in 1:N, j in 1:N, t in 1:T))
    
    # Optimise le modèle
    optimize!(model)
    
    # Vérifie la faisabilité de la solution
    if termination_status(model) != MOI.OPTIMAL
        possible = false
        println("Solution non réalisable trouvée après $it itérations.")
    else
        println("Solution réalisable trouvée.")
    end
end

if possible
    println("Toutes les solutions générées sont réalisables.")
end



